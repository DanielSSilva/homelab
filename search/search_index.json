{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfe0 Welcome to My Homelab docs!","text":"<p>Hey there! \ud83d\udc4b Welcome to my personal homelab documentation site \u2014 the place where I aim to catalog and detail all aspects of my homelab setup. From hardware to services and containers, everything I use is documented right here!</p> <p>This site primarily serves as my personal reference, helping me keep track of configurations, setups, and tips. However, since I love to share and talk about tech, I decided that this might help others as well.</p>"},{"location":"#why-i-created-this-site","title":"\ud83d\udda5\ufe0f Why I Created This Site","text":"<p>There are many times that I'm chatting with friends or fellow tech/selfhosted enthusiasts and I get questioned about something regarding my homelab. For that reason, I've decided to compile all this information into one easily accessible place. Now, whenever someone asks me, \"Hey, how'd you set up your Home Assistant?\" or \"What hardware do you recommend?\", I can simply point them right here!</p>"},{"location":"#things-that-i-aim-to-cover","title":"Things that I aim to cover","text":"<ul> <li>\ud83d\udee0 Hardware \u2013 What do I use as servers, NAS, networking gear, smart home devices, and more.</li> <li>\ud83d\udc33 Containers &amp; Virtualization \u2013 Containers, Unraid, VMs, etc</li> <li>\ud83d\udece\ufe0f Services &amp; Tools \u2013 A detailed list of services and tools that I use or have explored, ranging from pruductivity, to automation and everything in between.</li> </ul>"},{"location":"#contacts","title":"Contacts","text":"<p>If you have any questions or suggestions, feel free to either open an issue on GitHub or reach out to me via email - blog@danielssilva.com. I'm always open to feedback and love to hear from fellow tech enthusiasts!</p>"},{"location":"docker/","title":"Docker","text":"<p>This page documents my Docker setup, which is used to run many of the services in my homelab.</p>"},{"location":"docker/#overview","title":"Overview","text":"<p>Docker is a platform for developing, shipping, and running applications in containers. This page details how Docker is configured and used in my homelab.</p>"},{"location":"docker/#installation","title":"Installation","text":"<ul> <li>Installation Method: [How Docker was installed]</li> <li>Version: [Docker version in use]</li> <li>Host System: [Where Docker is running (Unraid, direct on host, etc.)]</li> </ul>"},{"location":"docker/#docker-network-configuration","title":"Docker Network Configuration","text":"Network Name Purpose IP Range Connected Services bridge Default Docker network 172.17.0.0/16 [Services] [custom_network] [Purpose] [IP Range] [Services]"},{"location":"docker/#volume-management","title":"Volume Management","text":"Volume Name Purpose Host Path Backup Strategy [volume_name] [Purpose] [Host path] [How it's backed up]"},{"location":"docker/#container-organization","title":"Container Organization","text":"<p>I organize my Docker containers using: - [Docker Compose/Portainer/Other tools] - Directory structure for compose files - Image versioning strategy</p>"},{"location":"docker/#key-containers","title":"Key Containers","text":"Container Image Ports Volumes Purpose [container_1] [image:tag] [port mappings] [volumes] [purpose] [container_2] [image:tag] [port mappings] [volumes] [purpose]"},{"location":"docker/#example-docker-compose","title":"Example Docker Compose","text":"<pre><code># Example compose file structure\nversion: '3'\nservices:\n  service-name:\n    image: image:tag\n    container_name: container-name\n    ports:\n      - \"host:container\"\n    volumes:\n      - /host/path:/container/path\n    environment:\n      - VARIABLE=value\n    restart: unless-stopped\n    networks:\n      - network-name\n</code></pre>"},{"location":"docker/#resource-limits","title":"Resource Limits","text":"<p>How container resources are managed: - CPU limits - Memory constraints - Restart policies</p>"},{"location":"docker/#management-interfaces","title":"Management Interfaces","text":"Tool Purpose Access URL Notes Portainer Container management [URL] [Notes] [Other tools] [Purpose] [URL] [Notes]"},{"location":"docker/#maintenance-procedures","title":"Maintenance Procedures","text":"<ul> <li>Image update strategy</li> <li>Container health checks</li> <li>Log management</li> <li>Pruning unused images/volumes</li> </ul>"},{"location":"unraid/","title":"Unraid","text":"<p>This page documents my Unraid setup, which serves as the foundation for much of my homelab.</p>"},{"location":"Network/Gear/","title":"Gear","text":"<p>I wanted a way to separate my devices into multiple vlans. Since network is usually a rather complicated topic, my main requisite was that I could have a friendly, simple interface to configure everything. Unifi kept popping up as the go-to solution, with products that range from entry-level to enterprise-grade. I decided to go with the entry-level products, as I don't need anything too fancy.</p>"},{"location":"Network/Gear/#dream-router","title":"Dream Router","text":"<p>This is the brains of my network. I have the first version that was released (as the time of writing they've released the new Dream Router 7). It's a router that's bridged with my ISP's (since I'm forced to use the ISP's router \ud83d\ude12). It has 4 Ethernet Ports, where 2 of them support PoE, and it also has a built-in access point.</p> <p>It serves my needs, but I do wish it had a bit more bandwith support. Although I have 1Gbps internet, the router's CPU is the bottleneck, and limits to ~600Mbps. This also happens because I have things like <code>Active Detections</code> and <code>Intrusion Prevention</code> enabled, which affect the CPU. </p> <p>Reference</p>"},{"location":"Network/Gear/#u6-in-wall","title":"U6 In-Wall","text":"<p>This is a wall-mounted access point with 4 Ethernet ports, with one supporting PoE. They are also PoE powered, so I could easily use one of Dream Router's PoE port to power it. </p> <p>Reference</p>"},{"location":"Network/Gear/#flex-mini-switch","title":"Flex mini switch","text":"<p>Powered by PoE (or USB-C), this is a small 4-port switch. The only reason why I have it is because it allows me to specify vlans for each port, allowing me to have different devices connected to different vlans under the same switch. Reference</p>"},{"location":"Network/Vlans/","title":"Vlans","text":"<p>My main reason for setting up Unifi is the fact that it allows me to segregate my network into multiple smaller ones. The goal of this approach is to have more control over my network by defining which devices/networks can communicate with each other.</p>"},{"location":"Network/Vlans/#trusted-network","title":"Trusted Network","text":"<p>The rule for this network is that only trusted, known devices have access. Devices like my phone, server, and desktop are included here. This network can see and access all other networks.</p>"},{"location":"Network/Vlans/#iot-network","title":"IoT Network","text":"<p>Devices on this network are those that require internet access but are not fully trusted since they are cloud-based and not entirely under my control. Examples include: - Xiaomi cameras - Google devices such as Google Mini or Google Nest - Smart vacuum cleaner</p> <p>This network is isolated to itself, meaning it cannot see or access devices on other networks, except for Home Assistant, which is hosted on the Trusted Network. This exception is IP-based.</p>"},{"location":"Network/Vlans/#local-only-network","title":"Local-Only Network","text":"<p>This network is for devices that need to communicate within my network but do not require internet access to function. Examples include: - Reolink cameras - Shelly devices</p> <p>This network follows the same philosophy as the IoT Network, where devices cannot see or access devices on other networks, except for Home Assistant.</p>"},{"location":"Network/Vlans/#guest-network","title":"Guest Network","text":"<p>This is the most restrictive network setup. Devices on this network cannot see anything else\u2014not even other devices on the same network. This is the network I use for guests.</p>"},{"location":"servers/Mac%20Mini%20M4/Colima%20mount%20folders/","title":"Colima mount folders","text":"<p>By default, Colima only mounts $HOME and /tmp/colima are mounted as writable. This means that, if you specify absolute paths on your docker compose, docker will not see them.</p>"},{"location":"servers/Mac%20Mini%20M4/Colima%20mount%20folders/#changes","title":"Changes","text":"<p>Go to <code>$HOME/.colima/default/colima.yaml</code> and search for the <code>mounts</code> key. Edit to include your volumes <pre><code>mounts:\n  - location: /Users/asgard\n    writable: true\n  - location: /tmp/colima\n    writable: true\n  - location: /Volumes/media\n    writable: true\n</code></pre></p>"},{"location":"servers/Mac%20Mini%20M4/FileVault/","title":"Problems with File Vault","text":"<p>When macOS boots, if you have File Vault enabled, you are prompted to introduce your user and password. Only after you introduce your credentials, the system boots into the actual OS and starts the apps/services. You can't even connect to the Mac through screen share.</p> <p>This poses an issue in cases like unexpected reboots (i.e system crashes), or turning back on after a power loss. This because none of my services like Home Assistant or Pihole start before I unlock the Mac.</p>"},{"location":"servers/Mac%20Mini%20M4/FileVault/#a-workaround","title":"A workaround","text":"<p>There's one workaround, but that doesn't totally solve the issue. If you want to do some maintenance like apply system updates or do a programed restart, you can prepopulate the file vault credentials and trigger a restart by running the following:</p> <p><pre><code>sudo fdesetup authrestart\n</code></pre> You are then prompted to input the username and the password. After that, the system restarts and you are back into the login screen. But keep in mind that this only allows you to access the Mac through the screen share. There's no apps starting in the background.</p>"},{"location":"servers/Mac%20Mini%20M4/FileVault/#the-solution","title":"The solution","text":"<p>The solution that I've found so far is a combination of disabling File Vault, and setting Mac to automatically log in as my user. This way, the system boots into the OS and starts the apps/services without needing to unlock it first. However, this means that if your Mac gets compromised, they can access all your data without needing to unlock it first.</p>"},{"location":"servers/Mac%20Mini%20M4/FileVault/#but-is-it-ok","title":"But is it ok?","text":"<p>I'm comfortable with this solution for 2 reasons: - I have created two admin users: myself and <code>asgard</code>. Asgard is what will be used for everything, whereas my user is just so that I have my iCloud account enabled. This way, if something happens to this machine, I can still lock it through my iCloud. - I'm not storing any sensitive data in this machine. No only that, but also if the machine gets physically compromised, the user still doesn't know the password.</p>"},{"location":"servers/Mac%20Mini%20M4/Hardware/","title":"Hardware Specifications","text":""},{"location":"servers/Mac%20Mini%20M4/Hardware/#specifications","title":"Specifications","text":"Component Specification Chip 10-core CPU, 10-core GPU, and 16-core Neural Engine Memory 16GB unified memory Storage 256GB SSD Connections and Expansion 5 USB-C ports, Gigabit Ethernet port, 3.5 mm headphone jack"},{"location":"servers/Mac%20Mini%20M4/Hardware/#power","title":"Power","text":"<ul> <li>It has a UPS connected to it, which is configured to shut down the Mac Mini when the battery reaches a certain percentage.</li> <li>Set to boot up when power is restored after a power outage.</li> <li>Power Consumption: According to Apple it idles at 4W, and at max it draws 65W. For comparison, my Custom Server (Olympus) draws 60W on idle.</li> </ul>"},{"location":"servers/Mac%20Mini%20M4/Mac%20Mini%20M4/","title":"Mac Mini M4","text":""},{"location":"servers/Mac%20Mini%20M4/Mac%20Mini%20M4/#overview","title":"Overview","text":"<p>I wanted to have a low-power server where I can host my critical services, like Pihole and Home Assistant. I also wanted to have a server that can run AI workloads, like LLMs, and do some media streaming. In short, it's the best bang for the buck for AI operations, with the added bonus of being able to serve other functions, when compared to a graphics card.</p> <p>For more details, explore the following sections:</p> <ul> <li>Hardware Specifications</li> <li>Software</li> <li>Problems with File Vault</li> <li>UTM</li> </ul>"},{"location":"servers/Mac%20Mini%20M4/Mount%20unraid%20Shares/","title":"On unraid","text":"<p>Set the NFS Share to export <code>Yes</code>.</p>"},{"location":"servers/Mac%20Mini%20M4/Mount%20unraid%20Shares/#on-macos","title":"On MacOS","text":"<ol> <li>macOS uses the Automounter (automount/autofs) rather than a Linux\u2010style /etc/fstab.  <pre><code>sudo nano /etc/auto_master\n</code></pre></li> </ol> <p>and add the following line to the end of the file:</p> <pre><code>/-    auto_nfs    -nobrowse,nosuid\n</code></pre> <ol> <li>Create and edit /etc/auto_nfs: <pre><code>sudo nano /etc/auto_nfs\n</code></pre></li> </ol> <p>and add the line: <pre><code>/Volumes/&lt;shareName&gt;  -fstype=nfs,rw,nfsvers=3,hard,intr    &lt;IP of unraid&gt;:&lt;/path/to/share&gt;\n</code></pre></p> <p>so it looks like this: <pre><code>/Volumes/media  -fstype=nfs,rw,nfsvers=3,hard,intr    &lt;IP of unraid&gt;:/mnt/user/media\n</code></pre></p> <ol> <li>Reload the automounter <pre><code>sudo automount -vc\n</code></pre></li> </ol>"},{"location":"servers/Mac%20Mini%20M4/Problems%20File%20Vault/","title":"Problems File Vault","text":"<p>When MacOS boots, if you have File Vault enabled, you are prompted to introduce your user and password. Only after you introduce your credentials, the system boots into the actual OS and starts the apps/services. You can't even connect to the Mac through screen share.</p> <p>This poses an issue in cases like unexpected reboots (i.e system crashes), or turning back on after a power loss. This because none of my services like Home Assistant or Pihole start before I unlock the Mac.</p>"},{"location":"servers/Mac%20Mini%20M4/Problems%20File%20Vault/#a-workaround","title":"A workaround","text":"<p>There's one workaround, but that doesn't totally solve the issue. If you want to do some maintenance like apply system updates or do a programed restart, you can prepolulate the file vault credentials and trigger a restart by running the following:</p> <p><pre><code>sudo fdesetup authrestart\n</code></pre> You are then prompted to input the username and the password. After that, the system restarts and you are back into the login screen. But keep in mind that this only allows you to access the Mac through the screen share. There's no apps starting in the background.</p>"},{"location":"servers/Mac%20Mini%20M4/Problems%20File%20Vault/#the-solution","title":"The solution","text":"<p>The solution that I've found so far is a combination of disabling File Vault, and setting Mac to automatically log in as my user. This way, the system boots into the OS and starts the apps/services without needing to unlock it first. However, this means that if your Mac gets compromised, they can access all your data without needing to unlock it first.</p>"},{"location":"servers/Mac%20Mini%20M4/Problems%20File%20Vault/#but-is-it-ok","title":"But is it ok?","text":"<p>I'm comfortable with this solution for 2 reasons: - I have created two admin users: myself and <code>asgard</code>. Asgard is what will be used for everything, whereas my user is just so that I have my iCloud account enabled. This way, if something happens to this machine, I can still lock it through my iCloud. - I'm not storing any sensitive data in this machine. No only that, but also if the machine gets physically compromised, the user still doesn't know the password.</p>"},{"location":"servers/Mac%20Mini%20M4/Software/","title":"Software","text":""},{"location":"servers/Mac%20Mini%20M4/Software/#brew","title":"Brew","text":"<p>Installed through their official docs</p>"},{"location":"servers/Mac%20Mini%20M4/Software/#colima","title":"Colima","text":"<p>Colima is a container runtime that runs on top of Docker. It provides a lightweight and efficient way to run containers, especially on macOS. This means that I don't need to install Docker Desktop to be able to run docker.</p>"},{"location":"servers/Mac%20Mini%20M4/Software/#installation","title":"Installation","text":"<pre><code>brew install colima\n\n# Set colima to start when system boots\nbrew services start colima\n</code></pre>"},{"location":"servers/Mac%20Mini%20M4/Software/#docker-docker-compose","title":"Docker &amp; Docker-Compose","text":"<p>Docker is the container runtime that I use to run most of my services. </p>"},{"location":"servers/Mac%20Mini%20M4/Software/#installation_1","title":"Installation","text":"<pre><code>brew install docker\nbrew install docker-compose\n</code></pre>"},{"location":"servers/Mac%20Mini%20M4/Software/#umt","title":"UMT","text":"<p>UTM employs Apple's Hypervisor virtualization framework to run ARM64 operating systems on Apple Silicon at near native speeds.</p> <p>Since I'm running Home Assistant  on this mac, I needed a way to run it in a VM. I've decided to try UTM, as it seems to be optimized especially for the M series macs.</p>"},{"location":"servers/Mac%20Mini%20M4/Software/#installation_2","title":"Installation","text":"<p>I installed it through the official website</p>"},{"location":"servers/Mac%20Mini%20M4/UMT/","title":"UTM","text":"<p>UTM employs Apple's Hypervisor virtualization framework to run ARM64 operating systems on Apple Silicon at near native speeds.</p> <p>Since I'm running Home Assistant  on this mac, I needed a way to run it in a VM. I've decided to try UTM, as it seems to be optimized especially for the M series macs.</p> <p>However, the biggest challenge is that there's in-app way to start the VM on boot. Instead, I have to use Automator to do the following:     - Launch the UTM app     - Wait 60 seconds to ensure that the app has started     - Run command that calls UTM's command line tool to start the VM     - Wait 30 seconds to ensure that the VM has started     - Run a command that calls UTM's command line tool attach the USB device to the VM</p> <p></p> <p>Tip</p> <p>you can run <code>/Applications/UTM.app/Contents/MacOS/utmctl usb list</code> to list the USB Devices </p> <p>If you want a more detailed explanation why I'm running Home Assistant on this Mac, you can check out the Home Assistant installation page.</p>"},{"location":"services/ActualBudget/","title":"Actual Budget","text":"<p>Actual is a local-first personal finance tool. It is 100% free and open-source, that is prety similar to the well-known YNAB. </p>"},{"location":"services/ActualBudget/#installation-and-setup","title":"Installation and setup","text":"<ul> <li>Installed through [[../unraid|unraid]]</li> <li><code>/data</code> is mapped to <code>/mnt/user/appdata/actual-server</code></li> <li>Is setup on [[Traefik#Adding traefik labels to unraid containers| Traefik by adding traefik labels to unraid containers]]</li> </ul>"},{"location":"services/ActualBudget/#running-on","title":"Running on","text":"<ul> <li>Custom Server (Olympus)</li> </ul>"},{"location":"services/Frigate/","title":"Frigate","text":""},{"location":"services/Frigate/#installation-and-configs","title":"Installation and configs","text":"<ul> <li>Installed through [[../unraid|unraid]]</li> <li><code>/config</code> is mapped to <code>/mnt/user/appdata/frigate</code></li> <li>Is setup on [[Traefik#Adding traefik labels to unraid containers| Traefik by adding traefik labels to unraid containers]]</li> </ul>"},{"location":"services/Ollama/","title":"Ollama","text":"<p>Ollama is an AI service running on the Mac Mini M4. It is used for local AI model inference and experimentation.</p>"},{"location":"services/Ollama/#running-on","title":"Running on","text":"<ul> <li>Host System: Mac Mini M4</li> </ul>"},{"location":"services/Ollama/#installation","title":"Installation","text":"<p>Ollama is installed via the dmg file from the official website.</p>"},{"location":"services/Tailscale/","title":"Tailscale","text":"<p>This page documents my Tailscale setup, which provides secure networking between my devices and homelab.</p>","tags":["service","networking","vpn","mac-mini","custom-server","both"]},{"location":"services/Tailscale/#overview","title":"Overview","text":"<p>Tailscale is a zero-config VPN that makes the devices and applications I use feel like they're on the same secure network, regardless of location.</p>","tags":["service","networking","vpn","mac-mini","custom-server","both"]},{"location":"services/Tailscale/#installation-locations","title":"Installation Locations","text":"Device/System Installation Method Version Purpose Primary Server [Install method] [Version] Main homelab access Mac Mini [Install method] [Version] Development machine access Mobile Devices [Install method] [Version] Remote monitoring [Other devices] [Install method] [Version] [Purpose]","tags":["service","networking","vpn","mac-mini","custom-server","both"]},{"location":"services/Tailscale/#network-configuration","title":"Network Configuration","text":"<ul> <li>Tailnet Name: [Your Tailnet name]</li> <li>Subnet Routes: [Subnets advertised]</li> <li>Exit Node Configuration: [Whether exit nodes are enabled]</li> <li>DNS Configuration: [MagicDNS/custom settings]</li> </ul>","tags":["service","networking","vpn","mac-mini","custom-server","both"]},{"location":"services/Tailscale/#access-controls","title":"Access Controls","text":"<p>Description of ACL policies implemented:</p> <pre><code>// Example ACL policy\n{\n  \"acls\": [\n    {\n      \"action\": \"accept\",\n      \"users\": [\"*\"],\n      \"ports\": [\"*:*\"]\n    }\n  ]\n}\n</code></pre>","tags":["service","networking","vpn","mac-mini","custom-server","both"]},{"location":"services/Tailscale/#key-features-in-use","title":"Key Features In Use","text":"<ul> <li>Tailscale SSH: [Enabled/Disabled, configuration]</li> <li>Funnel: [How Funnel is used, if applicable]</li> <li>Device Groups: [How devices are grouped]</li> <li>Tags: [Tags used to organize devices]</li> </ul>","tags":["service","networking","vpn","mac-mini","custom-server","both"]},{"location":"services/Tailscale/#services-accessed-via-tailscale","title":"Services Accessed via Tailscale","text":"Service Access Method Authentication Notes Home Assistant Direct access Normal HA auth Only accessible via Tailscale [Other service] [Access method] [Auth method] [Notes]","tags":["service","networking","vpn","mac-mini","custom-server","both"]},{"location":"services/Tailscale/#security-considerations","title":"Security Considerations","text":"<ul> <li>Multi-factor authentication configuration</li> <li>Device approval process</li> <li>Key rotation policy</li> <li>Access review process</li> </ul>","tags":["service","networking","vpn","mac-mini","custom-server","both"]},{"location":"services/Tailscale/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ul> <li>Connectivity problems</li> <li>Device authorization issues</li> <li>Performance considerations</li> </ul>","tags":["service","networking","vpn","mac-mini","custom-server","both"]},{"location":"services/Traefik/","title":"Traefik","text":""},{"location":"services/Traefik/#adding-traefik-labels-to-unraid-containers","title":"Adding traefik labels to unraid containers","text":"<ul> <li>Add a new label with key <code>traefik.enable</code> and set value to <code>true</code></li> <li>Add another label with key <code>traefik.http.routers.&lt;appname&gt;.entryPoints</code> and value <code>https</code></li> </ul>"},{"location":"services/Traefik/#manual-proxying","title":"Manual proxying","text":"<p>Whether it's because the service is on another machine, or because it requires some different, setup, there are scenarios where you need to create a proxy manually, rather than having Traefik doing the discovery through docker tags.</p>"},{"location":"services/Traefik/#changes-on-fileconfigyml","title":"Changes on fileConfig.yml","text":"<pre><code>http:\n## EXTERNAL ROUTING - Only use if you want to proxy something manually ##\nrouters:\n    ollama:\n        entryPoints:\n            - https\n        rule: 'Host(`ollama.mydomain.com`)'\n        service: ollama\n    openwebui:\n        entryPoints:\n            - https\n        rule: 'Host(`chat.mydomain.com`)'\n        service: openwebui\n</code></pre>"},{"location":"services/Traefik/#references","title":"References","text":"<ul> <li>https://docs.ibracorp.io/traefik/master/unraid</li> <li>Proxying Your First App by Ibracorp</li> </ul>"},{"location":"services/vscode-server/","title":"Allowing vscode-server to write to dockge","text":"<p>sudo chown -R 911:911 /mnt/user/appdata/dockge/stacks</p>"},{"location":"services/vscode-server/#force-all-files-that-are-created-afterwards-to-inherit-the-permissions-of-the-parent-directory","title":"Force all files that are created afterwards to inherit the permissions of the parent directory","text":"<p>sudo chmod g+s /mnt/user/appdata/dockge/stacks</p>"},{"location":"services/home-assistant/Installation/","title":"Installation","text":""},{"location":"services/home-assistant/Installation/#reasoning","title":"Reasoning","text":"<p>I'm currently running Home Assistant on my Mac Mini M4. Before owning this mac, I was running Home Assistant on my Custom Server (Olympus) on a dedicated VM under Unraid. However, because this server was being used for everything on my homelab, from experiments to \"production\" usage, this meant that from time to time my Home Assistant would go down: either because server ran out of memory, or because I crashed it so hard I had to hard reboot it, etc.</p> <p>While running it on the Mac Mini still has its challenges (see UTM and Problems File Vault, for my use case it's better than hosting it on my Unraid Instance. Maybe in the future I'll have a dedicated machine just for Home Assistant, but for now, this is the best solution I have.</p>"},{"location":"services/home-assistant/Installation/#running-on-docker","title":"Running on Docker?","text":"<p>Although I'm aware that there are ways to run Home Assistant on containers, there are also some limitations. For example, I would need to maintain HA Core, Hypervisor and so on as different containers. There's also issues with USB devices not being passed through to the container. I would also lose features like Addons, so I think this is the best compromise for me.</p>"},{"location":"tools/mkdocs/","title":"MkDocs","text":"<p>MkDocs is a static site generator that's specifically designed for creating project documentation. It is simple to use, highly customizable, and supports Markdown for writing content. So this seemed the perfect fit writing documentation for my homelab project. This is what's being used to generate the documentation for this website.</p> <p>If you look at the top right corner of the page, you can find a reference to the GitHub repository where the documentation is hosted.</p>"},{"location":"tools/mkdocs/#theme","title":"Theme","text":"<p>I'm using the mkdocs-material theme, which is a popular and feature-rich theme for MkDocs. It provides a clean and modern look, along with many customization options.</p>"},{"location":"tools/mkdocs/#previewing-documentation-locally","title":"Previewing Documentation locally","text":"<p>To preview the documentation locally, the following Docker command is used:</p> <pre><code>docker run --rm -it -p 8000:8000 -v ${PWD}:/docs --entrypoint sh squidfunk/mkdocs-material \\\n  -c \"pip install mkdocs-publisher &amp;&amp; mkdocs serve -a 0.0.0.0:8000\"\n</code></pre> <p>This command runs the MkDocs Material Docker image and serves the documentation on <code>http://localhost:8000</code>.</p>"}]}